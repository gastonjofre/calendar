{"version":3,"sources":["constants/months.js","constants/days.js","contexts/remindersContext.js","views/calendarView/components/headBar.js","components/confirmationModal.js","views/calendarView/components/reminderForm.js","views/calendarView/components/reminderInfo.js","views/calendarView/components/day.js","views/calendarView/components/daysHeader.js","views/calendarView/components/month.js","views/calendarView/index.js","index.js"],"names":["module","exports","ReminderContext","createContext","withStyles","theme","appBar","backgroundColor","palette","common","white","toolbar","display","justifyContent","monthYearText","fontWeight","classes","month","year","setNewMonth","setNewYear","onChangeMonth","newMonth","className","root","AppBar","position","Toolbar","Typography","variant","color","monthsNames","IconButton","aria-label","onClick","title","fontSize","marginLeft","spacing","marginRight","paper","width","background","border","boxShadow","shadows","padding","top","left","transform","onCancel","onConfirm","Modal","open","onClose","aria-labelledby","aria-describedby","gutterBottom","align","Grid","container","direction","justify","alignItems","Button","ReminderForm","date","saveReminder","reminder","useState","get","setTitle","time","setTime","city","setCity","errorTitle","setErrorTitle","hex","source","setColor","item","TextField","id","label","value","helperText","length","fullWidth","onChange","e","target","error","input","margin","toDateString","type","InputLabelProps","shrink","inputProps","step","newColor","index","defaultProps","flexWrap","subtitle","content","deleteReminder","editReminder","showDeleteConfirmation","setShowDeleteConfirmation","component","xs","Divider","Card","style","CardContent","sortRemindersByHour","a","b","x","toLowerCase","y","Day","disabled","day","remindersContext","useContext","RemindersContext","showReminderInfo","setShowReminderInfo","showReminderAddEdit","setShowReminderAddEdit","setReminder","numberHover","setNumberHover","showConfirmDeleteAll","setShowConfirmDeleteAll","reminderDate","Date","allReminders","updateReminders","reminders","setReminders","addOrEditReminder","reminderToEdit","closeReminderInfo","showDeleteAllRemindersButton","useEffect","onMouseEnter","onMouseLeave","size","map","reminderIterator","key","clickable","reminderToShow","CardActionArea","newAllReminders","assign","Drawer","anchor","drawer","reminderToDelete","splice","newReminder","editedReminder","newReminders","sort","minWidth","borderRadius","height","cursor","primary","light","days","Month","daysAmount","getDate","firstDay","getDay","lastMonthDaysAmount","Array","getLeftDisabledDays","disabledDay","keys","shift","getNormalDays","disabledAmount","Math","ceil","getRightDisabledDays","CalendarView","getMonth","setMonth","getFullYear","setYear","remindersDB","setRemindersDB","Provider","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.08ce89c6.chunk.js","sourcesContent":["module.exports = [\n  'January',\n  'February',\n  'March',\n  'April',\n  'May',\n  'June',\n  'July',\n  'August',\n  'September',\n  'October',\n  'November',\n  'December',\n];\n","module.exports = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];\n","import { createContext } from 'react';\n\nconst ReminderContext = createContext({});\n\nexport default ReminderContext;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { AppBar, Toolbar, Typography, withStyles, IconButton } from '@material-ui/core';\nimport monthsNames from 'constants/months';\nimport ChevronRightIcon from '@material-ui/icons/ChevronRight';\nimport ChevronLeftIcon from '@material-ui/icons/ChevronLeft';\n\nconst styles = (theme) => ({\n  appBar: {\n    backgroundColor: theme.palette.common.white,\n  },\n  toolbar: {\n    display: 'flex',\n    justifyContent: 'space-between',\n  },\n  monthYearText: {\n    fontWeight: 300,\n  },\n});\n\nconst HeadBar = ({ classes, month, year, setNewMonth, setNewYear }) => {\n  const onChangeMonth = (newMonth) => {\n    if (newMonth === 12) {\n      setNewMonth(0);\n      setNewYear(year + 1);\n    } else if (newMonth === -1) {\n      setNewMonth(11);\n      setNewYear(year - 1);\n    } else {\n      setNewMonth(newMonth);\n    }\n  };\n\n  return (\n    <div className={classes.root}>\n      <AppBar position=\"fixed\" className={classes.appBar}>\n        <Toolbar className={classes.toolbar}>\n          <div>\n            <Typography\n              variant=\"h4\"\n              className={classes.monthYearText}\n              display=\"inline\"\n              color=\"primary\"\n            >\n              {`${monthsNames[month]} ${year}`}\n            </Typography>\n          </div>\n          <div>\n            <IconButton aria-label=\"left\" onClick={() => onChangeMonth(month - 1)}>\n              <ChevronLeftIcon />\n            </IconButton>\n            <IconButton aria-label=\"right\" onClick={() => onChangeMonth(month + 1)}>\n              <ChevronRightIcon />\n            </IconButton>\n          </div>\n        </Toolbar>\n      </AppBar>\n    </div>\n  );\n};\n\nHeadBar.propTypes = {\n  classes: PropTypes.instanceOf(Object).isRequired,\n  month: PropTypes.number.isRequired,\n  year: PropTypes.number.isRequired,\n  setNewMonth: PropTypes.func.isRequired,\n  setNewYear: PropTypes.func.isRequired,\n};\n\nexport default withStyles(styles)(HeadBar);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles, Grid, Typography } from '@material-ui/core';\nimport Button from '@material-ui/core/Button';\nimport Modal from '@material-ui/core/Modal';\n\nconst styles = (theme) => ({\n  title: {\n    fontSize: 20,\n    marginLeft: theme.spacing(3),\n    marginRight: theme.spacing(3),\n  },\n  paper: {\n    position: 'absolute',\n    width: 400,\n    backgroundColor: theme.palette.background.paper,\n    border: '2px solid #000',\n    boxShadow: theme.shadows[5],\n    padding: theme.spacing(2, 4, 3),\n    top: '50%',\n    left: '50%',\n    transform: 'translate(-50%, -50%)',\n  },\n});\n\nconst ConfirmationModal = ({ classes, title, onCancel, onConfirm }) => (\n  <Modal\n    open\n    onClose={onCancel}\n    aria-labelledby=\"delete-reminder\"\n    aria-describedby=\"delete-reminder\"\n  >\n    <div className={classes.paper}>\n      <Typography className={classes.title} gutterBottom align=\"center\">\n        {title}\n      </Typography>\n      <Grid container direction=\"row\" justify=\"space-evenly\" alignItems=\"center\">\n        <Button variant=\"contained\" color=\"primary\" onClick={onConfirm}>\n          Confirm\n        </Button>\n        <Button variant=\"contained\" color=\"secondary\" onClick={onCancel}>\n          Cancel\n        </Button>\n      </Grid>\n    </div>\n  </Modal>\n);\n\nConfirmationModal.propTypes = {\n  classes: PropTypes.instanceOf(Object).isRequired,\n  title: PropTypes.string.isRequired,\n  onCancel: PropTypes.func.isRequired,\n  onConfirm: PropTypes.func.isRequired,\n};\n\nexport default withStyles(styles)(ConfirmationModal);\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles, Grid, TextField, Button, Typography } from '@material-ui/core';\nimport { CirclePicker } from 'react-color';\nimport { get } from 'lodash';\n\nconst styles = (theme) => ({\n  title: {\n    fontSize: 13,\n    marginLeft: theme.spacing(3),\n    marginRight: theme.spacing(3),\n  },\n  container: {\n    display: 'flex',\n    flexWrap: 'wrap',\n    width: '100%',\n  },\n  input: {\n    marginLeft: theme.spacing(3),\n    marginRight: theme.spacing(3),\n  },\n});\n\nconst ReminderForm = ({ classes, date, saveReminder, reminder }) => {\n  const [title, setTitle] = useState(get(reminder, 'title', ''));\n  const [time, setTime] = useState(get(reminder, 'time', '09:30'));\n  const [city, setCity] = useState(get(reminder, 'city', ''));\n  const [errorTitle, setErrorTitle] = useState(false);\n  const [color, setColor] = useState(\n    get(reminder, 'color', {\n      hex: '#607d8b',\n      source: 'hex',\n    })\n  );\n\n  const cleanState = () => {\n    setTitle('');\n    setTime('09:30');\n    setCity('');\n    setColor({\n      hex: '#607d8b',\n      source: 'hex',\n    });\n  };\n\n  const onSaveReminder = () => {\n    if (title.length <= 0) {\n      setErrorTitle(true);\n    }\n\n    if (title.length <= 30 && title.length > 0) {\n      saveReminder({\n        title,\n        time,\n        date,\n        city,\n        color,\n        index: get(reminder, 'index', null),\n      });\n      cleanState();\n    }\n  };\n\n  const changeTitle = (e) => {\n    setErrorTitle(e.target.value.length > 30);\n    setTitle(e.target.value);\n  };\n\n  return (\n    <Grid container direction=\"column\" justify=\"flex-start\" alignItems=\"stretch\" spacing={3}>\n      <Grid item className={classes.container}>\n        <TextField\n          id=\"title-input\"\n          label=\"Title\"\n          value={title}\n          helperText={`${title.length}/30`}\n          fullWidth\n          onChange={changeTitle}\n          error={errorTitle}\n          className={classes.input}\n          margin=\"normal\"\n        />\n      </Grid>\n      <Grid item className={classes.container} container direction=\"row\" justify=\"center\">\n        <Typography className={classes.title} color=\"textSecondary\" gutterBottom align=\"center\">\n          {`${date.toDateString()}`}\n        </Typography>\n      </Grid>\n      <Grid item className={classes.container}>\n        <TextField\n          id=\"hour-input\"\n          label=\"Hour\"\n          type=\"time\"\n          fullWidth\n          value={time}\n          onChange={(e) => setTime(e.target.value)}\n          className={classes.input}\n          InputLabelProps={{\n            shrink: true,\n          }}\n          inputProps={{\n            step: 300,\n          }}\n        />\n      </Grid>\n      <Grid item className={classes.container}>\n        <TextField\n          id=\"city-input\"\n          label=\"City\"\n          value={city}\n          fullWidth\n          onChange={(e) => setCity(e.target.value)}\n          className={classes.input}\n          margin=\"normal\"\n        />\n      </Grid>\n      <Grid item className={classes.container} container direction=\"row\" justify=\"center\">\n        <Typography className={classes.title} color=\"textSecondary\" gutterBottom align=\"center\">\n          {`${'Color'}`}\n        </Typography>\n      </Grid>\n      <Grid item className={classes.container} container direction=\"row\" justify=\"center\">\n        <CirclePicker onChange={(newColor) => setColor(newColor)} color={color} />\n      </Grid>\n      <Grid item className={classes.container} container direction=\"row\" justify=\"center\">\n        <Button variant=\"contained\" color=\"primary\" onClick={onSaveReminder}>\n          Save\n        </Button>\n      </Grid>\n    </Grid>\n  );\n};\n\nReminderForm.propTypes = {\n  classes: PropTypes.instanceOf(Object).isRequired,\n  date: PropTypes.instanceOf(Date).isRequired,\n  saveReminder: PropTypes.func.isRequired,\n  reminder: PropTypes.instanceOf(Object),\n};\n\nReminderForm.defaultProps = {\n  reminder: {},\n};\n\nexport default withStyles(styles)(ReminderForm);\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles, Grid, Typography, IconButton, Card, CardContent } from '@material-ui/core';\nimport EditIcon from '@material-ui/icons/Edit';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport EventIcon from '@material-ui/icons/EventOutlined';\nimport PlaceIcon from '@material-ui/icons/PlaceOutlined';\nimport QueryBuilderIcon from '@material-ui/icons/QueryBuilder';\nimport PaletteIcon from '@material-ui/icons/PaletteOutlined';\nimport ConfirmationModal from 'components/confirmationModal';\nimport { get } from 'lodash';\nimport Divider from '@material-ui/core/Divider';\n\nconst styles = (theme) => ({\n  title: {\n    fontSize: 25,\n    marginLeft: theme.spacing(3),\n    marginRight: theme.spacing(3),\n  },\n  subtitle: {\n    fontSize: 20,\n    marginLeft: theme.spacing(3),\n    marginRight: theme.spacing(3),\n  },\n  content: {\n    fontSize: 15,\n    marginLeft: theme.spacing(3),\n    marginRight: theme.spacing(3),\n  },\n  container: {\n    display: 'flex',\n    flexWrap: 'wrap',\n    width: '100%',\n  },\n  input: {\n    marginLeft: theme.spacing(3),\n    marginRight: theme.spacing(3),\n  },\n});\n\nconst ReminderInfo = ({ classes, reminder, deleteReminder, editReminder }) => {\n  const [showDeleteConfirmation, setShowDeleteConfirmation] = useState(false);\n\n  const onConfirmDelete = () => {\n    setShowDeleteConfirmation(false);\n    deleteReminder(reminder);\n  };\n\n  const onCancelDelete = () => setShowDeleteConfirmation(false);\n\n  return (\n    <>\n      <Grid container direction=\"column\" justify=\"flex-start\" alignItems=\"stretch\" spacing={3}>\n        <Grid\n          item\n          className={classes.container}\n          container\n          direction=\"row\"\n          justify=\"flex-end\"\n          alignItems=\"center\"\n        >\n          <IconButton\n            color=\"primary\"\n            aria-label=\"upload picture\"\n            component=\"span\"\n            onClick={editReminder}\n          >\n            <EditIcon />\n          </IconButton>\n          <IconButton\n            color=\"primary\"\n            aria-label=\"upload picture\"\n            component=\"span\"\n            onClick={() => setShowDeleteConfirmation(true)}\n          >\n            <DeleteIcon />\n          </IconButton>\n        </Grid>\n        <Grid item className={classes.container} container direction=\"row\" justify=\"center\">\n          <Typography className={classes.title} color=\"textSecondary\" gutterBottom align=\"center\">\n            {reminder.title}\n          </Typography>\n        </Grid>\n        <Grid item className={classes.container} container direction=\"row\" justify=\"center\">\n          <Typography\n            className={classes.subtitle}\n            color=\"textSecondary\"\n            gutterBottom\n            align=\"center\"\n          >\n            Date\n          </Typography>\n        </Grid>\n        <Grid\n          item\n          className={classes.container}\n          container\n          direction=\"row\"\n          justify=\"center\"\n          alignItems=\"center\"\n          spacing={1}\n        >\n          <Grid item xs={3} container direction=\"row\" justify=\"center\">\n            <EventIcon />\n          </Grid>\n          <Grid item xs={9}>\n            <Typography\n              className={classes.content}\n              color=\"textSecondary\"\n              gutterBottom\n              align=\"justify\"\n            >\n              {`${reminder.date.toDateString()}`}\n            </Typography>\n          </Grid>\n        </Grid>\n        <Divider />\n        <Grid item className={classes.container} container direction=\"row\" justify=\"center\">\n          <Typography\n            className={classes.subtitle}\n            color=\"textSecondary\"\n            gutterBottom\n            align=\"center\"\n          >\n            Hour\n          </Typography>\n        </Grid>\n        <Grid\n          item\n          className={classes.container}\n          container\n          direction=\"row\"\n          justify=\"center\"\n          alignItems=\"center\"\n          spacing={1}\n        >\n          <Grid item xs={3} container direction=\"row\" justify=\"center\">\n            <QueryBuilderIcon />\n          </Grid>\n          <Grid item xs={9}>\n            <Typography\n              className={classes.content}\n              color=\"textSecondary\"\n              gutterBottom\n              align=\"justify\"\n            >\n              {`${get(reminder, 'time', '')}`}\n            </Typography>\n          </Grid>\n        </Grid>\n        <Divider />\n        <Grid item className={classes.container} container direction=\"row\" justify=\"center\">\n          <Typography\n            className={classes.subtitle}\n            color=\"textSecondary\"\n            gutterBottom\n            align=\"center\"\n          >\n            City\n          </Typography>\n        </Grid>\n        <Grid\n          item\n          className={classes.container}\n          container\n          direction=\"row\"\n          justify=\"center\"\n          alignItems=\"center\"\n          spacing={1}\n        >\n          <Grid item xs={3} container direction=\"row\" justify=\"center\">\n            <PlaceIcon />\n          </Grid>\n          <Grid item xs={9}>\n            <Typography\n              className={classes.content}\n              color=\"textSecondary\"\n              gutterBottom\n              align=\"justify\"\n            >\n              {`${reminder.city === '' ? 'Unspecified' : reminder.city}`}\n            </Typography>\n          </Grid>\n        </Grid>\n        <Divider />\n        <Grid item className={classes.container} container direction=\"row\" justify=\"center\">\n          <Typography\n            className={classes.subtitle}\n            color=\"textSecondary\"\n            gutterBottom\n            align=\"center\"\n          >\n            Color\n          </Typography>\n        </Grid>\n        <Grid\n          item\n          className={classes.container}\n          container\n          direction=\"row\"\n          justify=\"space-around\"\n          alignItems=\"center\"\n          spacing={1}\n        >\n          <Grid item xs={3} container direction=\"row\" justify=\"center\">\n            <PaletteIcon />\n          </Grid>\n          <Grid item xs={9}>\n            <Card style={{ backgroundColor: reminder.color.hex }}>\n              <CardContent />\n            </Card>\n          </Grid>\n        </Grid>\n        <Divider />\n      </Grid>\n      {showDeleteConfirmation && (\n        <ConfirmationModal\n          title=\"Are you sure you want to delete this reminder?\"\n          onConfirm={onConfirmDelete}\n          onCancel={onCancelDelete}\n        />\n      )}\n    </>\n  );\n};\n\nReminderInfo.propTypes = {\n  classes: PropTypes.instanceOf(Object).isRequired,\n  reminder: PropTypes.instanceOf(Object).isRequired,\n  deleteReminder: PropTypes.func.isRequired,\n  editReminder: PropTypes.func.isRequired,\n};\n\nexport default withStyles(styles)(ReminderInfo);\n","import React, { useState, useEffect, useContext } from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  withStyles,\n  Grid,\n  Card,\n  CardContent,\n  Typography,\n  CardActionArea,\n  Drawer,\n  IconButton,\n} from '@material-ui/core';\nimport DeleteIcon from '@material-ui/icons/DeleteForeverOutlined';\nimport { get, assign } from 'lodash';\nimport RemindersContext from 'contexts/remindersContext';\nimport ConfirmationModal from 'components/confirmationModal';\nimport ReminderFrom from './reminderForm';\nimport ReminderInfo from './reminderInfo';\n\nconst drawerWidth = 300;\n\nconst styles = () => ({\n  root: {\n    minWidth: '14%',\n    borderRadius: 0,\n    height: '16.75vh',\n  },\n  content: {\n    padding: '0px',\n  },\n  title: {\n    fontSize: 14,\n  },\n  drawer: {\n    width: drawerWidth,\n  },\n  clickable: {\n    cursor: 'pointer',\n  },\n  disabled: {\n    minWidth: '14%',\n    borderRadius: 0,\n    height: '16.75vh',\n    background: '#EBEBE4',\n  },\n});\n\nconst sortRemindersByHour = (a, b) => {\n  const x = a.time.toLowerCase();\n  const y = b.time.toLowerCase();\n  if (x < y) {\n    return -1;\n  }\n  if (x > y) {\n    return 1;\n  }\n  return 0;\n};\n\nconst Day = ({ classes, disabled, day, month, year }) => {\n  const remindersContext = useContext(RemindersContext);\n  const [showReminderInfo, setShowReminderInfo] = useState(false);\n  const [showReminderAddEdit, setShowReminderAddEdit] = useState(false);\n  const [reminder, setReminder] = useState(null);\n  const [numberHover, setNumberHover] = useState(false);\n  const [showConfirmDeleteAll, setShowConfirmDeleteAll] = useState(false);\n  const reminderDate = new Date(year, month, day);\n  const allReminders = { ...remindersContext };\n  delete allReminders.updateReminders;\n  const reminders = get(remindersContext, `${year}.${month}.${day}`, []);\n  const setReminders = remindersContext.updateReminders;\n\n  const addOrEditReminder = (reminderToEdit) => {\n    setReminder(reminderToEdit);\n    setShowReminderAddEdit(true);\n    setShowReminderInfo(false);\n  };\n\n  const saveReminder = (newReminder) => {\n    if (!reminder) {\n      const newReminders = [...reminders, newReminder];\n      newReminders.sort(sortRemindersByHour);\n      const newAllReminders = { ...allReminders };\n      assign(newAllReminders, {\n        [year]: {\n          ...get(allReminders, `${year}`, {}),\n          [month]: {\n            ...get(allReminders, `${year}.${month}`, {}),\n            [day]: newReminders,\n          },\n        },\n      });\n      setReminders(newAllReminders);\n    } else {\n      const editedReminder = { ...newReminder };\n      delete editedReminder.index;\n      const newReminders = [...reminders];\n      newReminders[newReminder.index] = editedReminder;\n      newReminders.sort(sortRemindersByHour);\n      const newAllReminders = { ...allReminders };\n      assign(newAllReminders, {\n        [year]: {\n          ...get(allReminders, `${year}`, {}),\n          [month]: {\n            ...get(allReminders, `${year}.${month}`, {}),\n            [day]: newReminders,\n          },\n        },\n      });\n      setReminders(newAllReminders);\n    }\n    setShowReminderAddEdit(false);\n  };\n\n  const closeReminderInfo = () => {\n    setReminder(null);\n    setShowReminderInfo(false);\n    setShowReminderAddEdit(false);\n  };\n\n  const showReminderInfoDrawer = (reminderToShow) => {\n    setReminder(reminderToShow);\n    setShowReminderInfo(true);\n    setShowReminderAddEdit(false);\n  };\n\n  const deleteReminder = (reminderToDelete) => {\n    closeReminderInfo();\n    reminders.splice(reminderToDelete.index, 1);\n    const newAllReminders = { ...allReminders };\n    assign(newAllReminders, {\n      [year]: {\n        ...get(allReminders, `${year}`, {}),\n        [month]: {\n          ...get(allReminders, `${year}.${month}`, {}),\n          [day]: reminders,\n        },\n      },\n    });\n    setReminders(newAllReminders);\n  };\n\n  const showDeleteAllRemindersButton = () => numberHover && reminders.length > 0 && !disabled;\n\n  const deleteAllReminders = () => {\n    setShowConfirmDeleteAll(false);\n    const newAllReminders = { ...allReminders };\n    assign(newAllReminders, {\n      [year]: {\n        ...get(allReminders, `${year}`, {}),\n        [month]: {\n          ...get(allReminders, `${year}.${month}`, {}),\n          [day]: [],\n        },\n      },\n    });\n    setReminders(newAllReminders);\n  };\n\n  const cleanState = () => {\n    setShowReminderInfo(false);\n    setShowReminderAddEdit(false);\n    setReminder(null);\n    setNumberHover(false);\n    setShowConfirmDeleteAll(false);\n  };\n\n  useEffect(() => {\n    cleanState();\n  }, [month, year]);\n\n  return (\n    <>\n      <Card className={disabled ? classes.disabled : classes.root} variant=\"outlined\">\n        <CardContent className={classes.content}>\n          <Grid container direction=\"column\" justify=\"center\" alignItems=\"stretch\">\n            <Typography\n              className={classes.title}\n              color=\"textSecondary\"\n              gutterBottom={!showDeleteAllRemindersButton()}\n              align=\"center\"\n              onMouseEnter={() => setNumberHover(true)}\n              onMouseLeave={() => setNumberHover(false)}\n            >\n              {showDeleteAllRemindersButton() ? (\n                <IconButton\n                  aria-label=\"delete\"\n                  className={classes.margin}\n                  size=\"small\"\n                  onClick={() => setShowConfirmDeleteAll(true)}\n                >\n                  <DeleteIcon />\n                </IconButton>\n              ) : (\n                day\n              )}\n            </Typography>\n            {!disabled &&\n              reminders.map((reminderIterator, index) => (\n                <Card\n                  key={`${reminderIterator.title}-${index}`}\n                  style={{ backgroundColor: reminderIterator.color.hex }}\n                  className={classes.clickable}\n                  onClick={() => showReminderInfoDrawer({ ...reminderIterator, index })}\n                >\n                  {/* TODO: COMING SOON: New component */}\n                  <Typography\n                    className={classes.title}\n                    color=\"textSecondary\"\n                    gutterBottom\n                    align=\"center\"\n                  >\n                    {reminderIterator.title}\n                  </Typography>\n                </Card>\n              ))}\n          </Grid>\n        </CardContent>\n        {!disabled && (\n          <CardActionArea onClick={() => addOrEditReminder(null)}>\n            <CardContent />\n          </CardActionArea>\n        )}\n      </Card>\n      {showConfirmDeleteAll && (\n        <ConfirmationModal\n          onConfirm={deleteAllReminders}\n          onCancel={() => setShowConfirmDeleteAll(false)}\n          title=\"Are you sure you want to delete ALL the reminders for this day?\"\n        />\n      )}\n      <Drawer\n        open={showReminderInfo || showReminderAddEdit}\n        anchor=\"right\"\n        onClose={closeReminderInfo}\n        classes={{ paper: classes.drawer }}\n      >\n        {showReminderInfo && (\n          <ReminderInfo\n            reminder={reminder}\n            editReminder={() => addOrEditReminder(reminder)}\n            deleteReminder={deleteReminder}\n          />\n        )}\n        {showReminderAddEdit && (\n          <ReminderFrom date={reminderDate} reminder={reminder} saveReminder={saveReminder} />\n        )}\n      </Drawer>\n    </>\n  );\n};\n\nDay.propTypes = {\n  classes: PropTypes.instanceOf(Object).isRequired,\n  disabled: PropTypes.bool,\n  day: PropTypes.number.isRequired,\n  month: PropTypes.number,\n  year: PropTypes.number,\n};\n\nDay.defaultProps = {\n  disabled: false,\n  month: 0,\n  year: 0,\n};\n\nexport default withStyles(styles)(Day);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core';\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\nimport Typography from '@material-ui/core/Typography';\nimport days from 'constants/days';\n\nconst styles = (theme) => ({\n  root: {\n    minWidth: '14%',\n    'max-height': '5vh',\n    'border-radius': 0,\n    background: theme.palette.primary.light,\n  },\n  title: {\n    fontSize: 13,\n  },\n});\n\nconst DaysHeader = ({ classes }) =>\n  days.map((day) => (\n    <Card key={`header-${day}`} className={classes.root} variant=\"outlined\">\n      <CardContent>\n        <Typography className={classes.title} color=\"textSecondary\" gutterBottom align=\"center\">\n          {day}\n        </Typography>\n      </CardContent>\n    </Card>\n  ));\n\nDaysHeader.propTypes = {\n  classes: PropTypes.instanceOf(Object).isRequired,\n};\n\nexport default withStyles(styles)(DaysHeader);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Grid } from '@material-ui/core';\nimport Day from './day';\nimport DaysHeader from './daysHeader';\n\nconst Month = ({ month, year }) => {\n  const actualMonth = new Date(year, month + 1, 0);\n  const daysAmount = actualMonth.getDate();\n  const actualMonthFirstDay = new Date(year, month, 1);\n  const firstDay = actualMonthFirstDay.getDay();\n\n  const getLeftDisabledDays = () => {\n    const newMonth = month > 0 ? month : 12;\n    const lastMonth = new Date(year, newMonth, 0);\n    const lastMonthDaysAmount = lastMonth.getDate();\n\n    return [...Array(firstDay)].map((item, index) => lastMonthDaysAmount - firstDay + 1 + index);\n  };\n\n  const getNormalDays = () => {\n    const days = [...Array(daysAmount + 1).keys()];\n    days.shift();\n    return days;\n  };\n\n  const getRightDisabledDays = () => {\n    const nextSevenMultiplo = Math.ceil((daysAmount + firstDay) / 7) * 7;\n    const disabledAmount = nextSevenMultiplo - (daysAmount + firstDay);\n\n    const days = [...Array(disabledAmount + 1).keys()];\n    days.shift();\n    return days;\n  };\n\n  return (\n    <Grid container direction=\"row\" justify=\"center\" alignItems=\"center\" spacing={0}>\n      <DaysHeader />\n      {getLeftDisabledDays().map((disabledDay) => (\n        <Day key={`disabled-${disabledDay}`} disabled day={disabledDay} />\n      ))}\n      {getNormalDays().map((day) => (\n        <Day key={`enabled-${day}`} day={day} month={month} year={year} />\n      ))}\n      {getRightDisabledDays().map((disabledDay) => (\n        <Day key={`disabled-${disabledDay}`} disabled day={disabledDay} />\n      ))}\n    </Grid>\n  );\n};\n\nMonth.propTypes = {\n  month: PropTypes.number.isRequired,\n  year: PropTypes.number.isRequired,\n};\n\nexport default Month;\n","import React, { useState } from 'react';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport RemindersContext from 'contexts/remindersContext';\nimport HeadBar from './components/headBar';\nimport Month from './components/month';\n\nconst CalendarView = () => {\n  const getActualMonth = () => {\n    const actualDate = new Date();\n    return actualDate.getMonth();\n  };\n  const getActualYear = () => {\n    const actualDate = new Date();\n    return actualDate.getFullYear();\n  };\n\n  const [month, setMonth] = useState(getActualMonth());\n  const [year, setYear] = useState(getActualYear);\n  const [remindersDB, setRemindersDB] = useState({});\n\n  return (\n    <>\n      <HeadBar month={month} year={year} setNewMonth={setMonth} setNewYear={setYear} />\n      <Toolbar />\n      <RemindersContext.Provider\n        value={{\n          ...remindersDB,\n          updateReminders: setRemindersDB,\n        }}\n      >\n        <Month month={month} year={year} />\n      </RemindersContext.Provider>\n    </>\n  );\n};\n\nexport default CalendarView;\n","import 'react-app-polyfill/ie9';\nimport 'react-app-polyfill/stable';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport CalendarView from './views/calendarView';\n\nconst root = <CalendarView />;\n\nReactDOM.render(root, document.getElementById('root'));\n"],"sourceRoot":""}